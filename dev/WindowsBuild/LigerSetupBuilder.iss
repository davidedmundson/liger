; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

;#define MyAppName "Liger"
;#define MyAppVersion "1.1.0"
;#define MyAppPublisher "The University of Sheffield"
;#define MyAppURL "https://github.com/ligerdev/liger"
;#define MyAppExeName "liger.exe"

;#define ProjectDir "C:\Users\steve\Documents\SmartGit_Repos\liger"
;#define BuildDir "C:\Users\steve\Documents\SmartGit_Repos\Liger_6_0_0_Installation"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{9F1544F8-D20C-4975-88FE-3AA3D706909D}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
LicenseFile={#ProjectDir}\LICENSE
OutputDir={#BuildDir}
OutputBaseFilename=liger-win-{#MyAppVersion}-x64
Compression=lzma
SolidCompression=yes
ChangesEnvironment=true
UninstallDisplayIcon={app}\{#MyAppExeName}
ChangesAssociations=yes
; "ArchitecturesInstallIn64BitMode=x64" requests that the install be
; done in "64-bit mode" on x64, meaning it should use the native
; 64-bit Program Files directory and the 64-bit view of the registry.
ArchitecturesInstallIn64BitMode=x64

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; 
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; 
Name: modifypath; Description: &Add MATLAB path to system path;

[Files]
Source: "{#BuildDir}\bin\liger.exe"; DestDir: "{app}\bin"; Flags: ignoreversion
Source: "{#BuildDir}\bin\*"; DestDir: "{app}\bin"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#BuildDir}\lib\*"; DestDir: "{app}\lib"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#BuildDir}\share\*"; DestDir: "{app}\share"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#BuildDir}\bin\vc_redist.x64.exe"; DestDir: "{tmp}"; Flags: deleteafterinstall
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\bin\{#MyAppExeName}"
Name: "{group}\Uninstall"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\bin\{#MyAppExeName}"; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{app}\bin\{#MyAppExeName}"; Tasks: quicklaunchicon

[Run]
Filename: "{tmp}\vc_redist.x64.exe"; Check: VCRedistNeedsInstall; Flags: postinstall nowait skipifsilent

[Registry]
Root: HKCR; Subkey: ".lgr"; ValueType: string; ValueName: ""; ValueData: "LigerWorkflowFile"; Flags: uninsdeletevalue
Root: HKCR; Subkey: "LigerWorkflowFile"; ValueType: string; ValueName: ""; ValueData: "Liger Workflow File"; Flags: uninsdeletekey
Root: HKCR; Subkey: "LigerWorkflowFile\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\bin\{#MyAppExeName},0"
Root: HKCR; Subkey: "LigerWorkflowFile\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\bin\{#MyAppExeName}"" ""%1"""

[Code]

const 
  ModPathName = 'modifypath';
  ModPathType = 'user';

function ModPathDir(): TArrayOfString;
var 
  DMatlabPath: TArrayOfString;
  I: Integer;  
  MFound: Boolean;
  CMPath: String;
begin
  
  setArrayLength(DMatlabPath, 10);
  I := 9;
  MFound := false
  DMatlabPath[0] := ExpandConstant('C:\Program Files\MATLAB\R2013a\bin\win64');
  DMatlabPath[1] := ExpandConstant('C:\Program Files\MATLAB\R2013b\bin\win64');
  DMatlabPath[2] := ExpandConstant('C:\Program Files\MATLAB\R2014a\bin\win64');
  DMatlabPath[3] := ExpandConstant('C:\Program Files\MATLAB\R2014b\bin\win64');
  DMatlabPath[4] := ExpandConstant('C:\Program Files\MATLAB\R2015a\bin\win64');
  DMatlabPath[5] := ExpandConstant('C:\Program Files\MATLAB\R2015b\bin\win64');
  DMatlabPath[6] := ExpandConstant('C:\Program Files\MATLAB\R2016a\bin\win64');
  DMatlabPath[7] := ExpandConstant('C:\Program Files\MATLAB\R2016b\bin\win64');
  DMatlabPath[8] := ExpandConstant('C:\Program Files\MATLAB\R2017a\bin\win64');
  DMatlabPath[9] := ExpandConstant('C:\Program Files\MATLAB\R2017b\bin\win64');

  while (MFound=FALSE) and (I>=0) do
  begin
    CMPath := DMatlabPath[I];
    MFound := DirExists(CMPath);
    I := I-1;  
  end;
  
  if (MFound=true) then
    begin
      setArrayLength(Result, 1);
      Result[0] := ExpandConstant(CMPath);
    end
  else
    MsgBox('MATLAB Not found.', mbInformation, MB_OK);

end;
#include "modpath.iss"

// Check if vcredist is installed
#IFDEF UNICODE
  #DEFINE AW "W"
#ELSE
  #DEFINE AW "A"
#ENDIF
type
  INSTALLSTATE = Longint;
const
  INSTALLSTATE_DEFAULT = 5;      // The product is installed for the current user.
  // Visual C++ 2015 Redistributable 14.0.23026
  VC_2015_REDIST_X64_MIN = '{A1C31BA5-5438-3A07-9EEE-A5FB2D0FDE36}';
  VC_2015_REDIST_X64_ADD = '{B0B194F8-E0CE-33FE-AA11-636428A4B73D}';

function MsiQueryProductState(szProduct: string): INSTALLSTATE; 
  external 'MsiQueryProductState{#AW}@msi.dll stdcall';

function VCVersionInstalled(const ProductID: string): Boolean;
begin
  Result := MsiQueryProductState(ProductID) = INSTALLSTATE_DEFAULT;
end;

function VCRedistNeedsInstall: Boolean;
begin
  // here the Result must be True when you need to install your VCRedist
  // or False when you don't need to, so now it's upon you how you build
  // this statement, the following won't install your VC redist only when
  // the Visual C++ 2010 Redist (x86) and Visual C++ 2010 SP1 Redist(x86)
  // are installed for the current user
  Result := not (VCVersionInstalled(VC_2015_REDIST_X64_MIN) and 
    VCVersionInstalled(VC_2015_REDIST_X64_ADD));
end;
